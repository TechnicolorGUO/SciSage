# !/usr/bin/env python
# -*- coding:utf-8 -*-
# ==================================================================
# [Author]       : shixiaofeng
# [Descriptions] :
# ==================================================================

"""
After AutoSurvey generates the paper JSON files, they are converted into a format that can be evaluated by MapReduce.

db_path: Path to the AutoSurvey database

autosurvey_json_folder: Directory containing the files generated by AutoSurvey

output_folder: Output directory for the converted files
"""


import os
import json
import re

def load_json_as_dict(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    if isinstance(data, dict):
        return data
    else:
        raise ValueError("The JSON file content is not of dictionary type.")

def insert_zero_after_first_hash(s: str) -> str:
    index = s.find('#')
    if index != -1 and index + 1 < len(s) and s[index + 1] != '#':
        return s[:index + 1] + " 0." + s[index + 1:]
    return s

def extract_headings(text):
    pattern = r"(?:^|\n)(#{1,3} .+?)(?=\n\s*\n|$)"
    matches = re.findall(pattern, text, flags=re.DOTALL)
    return "\n\n".join(match.strip() for match in matches)

def save_list_to_jsonl(data_list, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        for item in data_list:
            json_line = json.dumps(item, ensure_ascii=False)
            f.write(json_line + '\n')

def function_translate(data_dict, title, save_path, db_data_dict):
    result_list = []
    result = {"title": title, "papers": [], "outline": "", "content": ""}
    content = insert_zero_after_first_hash(data_dict["survey"])
    result["content"] = content
    outline = extract_headings(data_dict["survey"])
    outline = insert_zero_after_first_hash(outline)
    result["outline"] = outline

    for id_name in data_dict["reference"]:
        arxiv_id = data_dict["reference"][id_name]
        for db_data_id in db_data_dict["cs_paper_info"].keys():
            if arxiv_id == db_data_dict["cs_paper_info"][db_data_id]["id"]:
                w = {
                    "title": db_data_dict["cs_paper_info"][db_data_id]["title"],
                    "txt": db_data_dict["cs_paper_info"][db_data_id]["abs"]
                }
                result["papers"].append(w)
                break

    result_list.append(result)
    save_list_to_jsonl(result_list, save_path)

def batch_translate_folder(json_folder_path, db_json_path, output_folder_path):
    db_data = load_json_as_dict(db_json_path)

    os.makedirs(output_folder_path, exist_ok=True)

    for filename in os.listdir(json_folder_path):
        if filename.endswith('.json'):
            json_file_path = os.path.join(json_folder_path, filename)
            title = os.path.splitext(filename)[0]
            output_file_path = os.path.join(output_folder_path, title + ".jsonl")

            try:
                autosurvey_data = load_json_as_dict(json_file_path)
                function_translate(autosurvey_data, title, output_file_path, db_data)
                print(f"Processing completed: {filename} -> {output_file_path}")
            except Exception as e:
                print(f"Skip the file： {filename}，error：{e}")

if __name__ == '__main__':
    db_path = ''
    autosurvey_json_folder = ''
    output_folder = ''

    batch_translate_folder(autosurvey_json_folder, db_path, output_folder)
